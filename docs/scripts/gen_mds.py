"""Generate markdown files for the environments.

Usage:
    python docs/scripts/gen_mds.py
"""
__author__ = "Sander Schulhoff"
__email__ = "sanderschulhoff@gmail.com"

import os
import re

import gymnasium as gym
from tqdm import tqdm
from utils import trim

import miniwob  # noqa: F401

LAYOUT = "env"

pattern = re.compile(r"(?<!^)(?=[A-Z])")

gym.logger.set_level(gym.logger.DISABLED)

all_envs = list(gym.envs.registry.values())
filtered_envs = []

# Obtain filtered list
for env_spec in tqdm(all_envs):
    if env_spec.namespace != "miniwob":
        continue
    filtered_envs.append(env_spec)
filtered_envs.sort(key=lambda x: x.name)


# Update Docs
for i, env_spec in tqdm(enumerate(filtered_envs)):
    print("ID:", env_spec.id)
    try:
        env = gym.make(env_spec.id)
        docstring = env.unwrapped.__doc__
        if not docstring:
            docstring = env.unwrapped.__class__.__doc__
        docstring = trim(docstring)

        env_type = "miniwob"
        env_name = env_spec.name
        title_env_name = env_name.replace("-", " ").title()

        # path for saving the markdown file
        v_path = os.path.join(
            os.path.dirname(__file__),
            "..",
            "environments",
            env_type,
            env_name + ".md",
        )
        os.makedirs(os.path.dirname(v_path), exist_ok=True)

        front_matter = f"""---
autogenerated:
title: {title_env_name}
---
"""
        title = f"# {title_env_name}"
        gif = (
            "```{figure}"
            + f" ../../_static/videos/{env_type}/{env_name}.gif"
            + f" \n:width: 200px\n:name: {env_name}\n```"
        )
        info = (
            "This environment is part of the "
            + "<a href='..'>MiniWoB++ environments</a>, "
            + "which share the same observation and action spaces. "
            + "Please read that page first for general information."
        )
        if docstring is None:
            docstring = "No information provided"
        all_text = f"""{front_matter}
{title}

{gif}

{info}

{docstring}
"""
        file = open(v_path, "w", encoding="utf-8")
        file.write(all_text)
        file.close()
    except Exception as e:
        print(e)
    finally:
        env.close()
